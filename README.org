* Migratus
  MIGRATE ALL THE THINGS!

  A general migration framework, with an implementation for database migrations.

  Designed to be compatible with a git based work flow where multiple topic
  branches may exist simultaneously, and be merged into a master branch in
  unpredictable order.

  This is accomplished two ways:
  1. Migration ids are not assumed to be incremented integers.  It is
     recommended that they be timestamps (e.g. '20111202091200').
  2. Migrations are considered for completion independently.

  In contrast, using a single global version for a store and incremented
  integers for migration versions, it is possible for a higher numbered migration
  to get merged to master and deployed before a lower numbered migration, in
  which case the lower numbered migration would never get run, unless it is
  renumbered.

  Migratus does not use a single global version for a store.  It considers each
  migration independently, and runs all uncompleted migrations in sorted order.
** Quick Start
   - Add Migratus as a dependency and a dev dependency:
     : :dependencies [[migratus "0.3.0"]]
     : :dev-dependencies [[migratus "0.3.0"]]
  
   - Add the following key and value to your project.clj:
     : :migratus {:store :database
     :            :migration-dir "migrations"
     :            :db {:classname "com.mysql.jdbc.Driver"
     :                 :subprotocol "mysql"
     :                 :subname "//localhost/migratus"
     :                 :user "root"
     :                 :password ""}}
  
   - Add the following code to
     "src/migrations/20111206154000-create-foo-table.up.sql"
     : CREATE TABLE IF NOT EXISTS foo(id BIGINT);
  
   - Run `lein migratus migrate`
** Configuration
   Migratus is configured via a configuration map that you pass in as its first
   parameter.  The :store key describes the type of store against which
   migrations should be run.  All other keys/values in the configuration map are
   store specific.
*** Databases
    To run migrations against a database use a :store of :database, and specify
    the database connection configuration in the :db key of the configuration
    map.  This connection information is passed directly to clojure.java.jdbc.
    For example:

    : {:store :database
    :  :migration-dir "migrations"
    :  :db {:classname "com.mysql.jdbc.Driver"
    :       :subprotocol "mysql"
    :       :subname "//localhost/migratus"
    :       :user "root"
    :       :password ""}}

    or:

    : {:store :database
    :  :migration-dir "migrations"
    :  :db ~(get (System/getenv) "DATABASE_URL")}

    The :migration-dir key specifies the directory on the classpath in which to
    find SQL migration files.  Each file should be named with the following
    pattern "[id]-[name]-[direction].sql" where id is a unique integer id for
    the migration, name is some human readable description of the migration, and
    direction is either 'up' or 'down'.

    If Migratus is trying to run either the up or down migration and it does not
    exist, then an Exception will be thrown.

    See test/migrations in this repository for an example of how database
    migrations work.

** Usage
   Migratus can be used programmatically by calling one of the following
   functions:

   | Function              | Description                                                                               |
   |-----------------------+-------------------------------------------------------------------------------------------|
   | migratus.core/migrate | Run 'up' for any migrations that have not been run.                                       |
   | migratus.core/up      | Run 'up' for the specified migration ids. Will skip any migration that is already up.     |
   | migratus.core/down    | Run 'down' for the specified migration ids. Will skip any migration that is already down. |

   See the docstrings of each function for more details.

   Migratus can also be used from leiningen if you add it (and a database driver) as a dev dependency.

   : :dev-dependencies [[migratus "0.3.0"] 
   :                    [postgresql/postgresql "9.1-901.jdbc4"]]

   And add a configuration :migratus key to your project.clj.

   : :migratus {:store :database
   :            :migration-dir "migrations"
   :            :db "postgres://localhost/mydb"}

   You can then run the following tasks:

   | Task                     | Description                                                                                |
   |--------------------------+--------------------------------------------------------------------------------------------|
   | lein migratus migrate    | Run 'up' for any migrations that have not been run.                                        |
   | lein migratus up & ids   | Run 'up' for the specified migration ids.  Will skip any migration that is already up.     |
   | lein migratus down & ids | Run 'down' for the specified migration ids.  Will skip any migration that is already down. |
** License
   : Copyright Â© 2011 Paul Stadig
   : 
   : Licensed under the Apache License, Version 2.0.
